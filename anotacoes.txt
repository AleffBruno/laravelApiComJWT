gettingStart API {
    > $ php artisan make:model Task --migration --resource --controller
    > escreva as migrations
    > $ php artisan migrate
    > adicione as rotas
    > escreva os meodos nas controller
    > adicione o protected $fillable, na Model Task
}

criando testes {
    > $ php artisan make:test TaskTest
    > rodar os testes : $ ./vendor/bin/phpunit
    > adicione 2 linhas em 'phpunit.xml' caso esteja usando sqlite {
        >> essa ja tava <env name="SESSION_DRIVER" value="array"/>
        <env name="DB_CONNECTION" value="sqlite"/>
        <env name="DB_DATABASE" value=":memory:"/>
    }
    > To simplify creating tasks in our tests we can use Model Factories. {
        > $ php artisan make:factory TaskFactory --model=Task
        > These factories can be used for seeding your development database 
        > The factories are located in the database/factories folder.
        > Then create a seeder to check it works:
        > $ php artisan make:seeder TaskSeeder
        > Adicione a linha '$this->call(TaskSeeder::class);' no metodo run em 'DatabaseSeeder.php'
        > We can use the 'php artisan db:seed' command to invoke the run command
    }
    > escrevendo o teste {
        veja o arquivo tests\Feature\TaskTest.php
    }
}

*FALHOU
JWT {
    > $ composer require tymon/jwt-auth "1.0.*"
    > $ php artisan vendor:publish --provider="Tymon\JWTAuth\Providers\LaravelServiceProvider"  ( vai criar o arquivo config/jwt.php.)
    > Next step is to generate a secret key : $ php artisan jwt:secret (This command will add a JWT_SECRET value to our .env file)
    > as models que usarÃ£o JWT necessiram implementar 'implements JWTSubject' ( veja app\User.php )
    > em config/auth.php {
        'defaults' => [
            'guard' => 'api',
            'passwords' => 'users',
        ],

        ...

        'guards' => [
            'api' => [
                'driver' => 'jwt',
                'provider' => 'users',
            ],
        ],
    }
    BONUS
    > definindo rotas em routes/api.php {
        Route::post('/register', 'AuthController@register');

        Route::post('/login', 'AuthController@login');
        Route::post('/logout', 'AuthController@logout');
    }
    > php artisan make:controller AuthController
    > implemente os metodos em AuthController ( veja o arquivo )
}


CORS {
    > $ composer require barryvdh/laravel-cors
    > And add it to app/Http/Kernel.php in the $middleware array {
        protected $middleware = [
            ...
            \Barryvdh\Cors\HandleCors::class,
        ];
    }
}

